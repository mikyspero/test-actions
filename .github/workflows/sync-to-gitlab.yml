name: Sync to GitLab

on:
  push:
    branches: [ "main" ]

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Check for sync message
        id: check_sync
        run: |
          echo "Checking commit message for sync flag..."
          if [[ "${{ github.event.head_commit.message }}" == *"[sync]"* ]]; then
            echo "This is a synchronization commit. Skipping further actions."
            echo "skip=true" >> $GITHUB_ENV  # Set an environment variable to skip the sync
          else
            echo "This is a normal commit. Proceeding with sync."
            echo "skip=false" >> $GITHUB_ENV  # Set to false to continue
          fi

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get commit author info
        id: author
        run: |
          echo "name=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
          echo "email=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_OUTPUT
          
      - name: Configure Git
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_USERNAME: ${{ secrets.GITLAB_USERNAME }}
          GITLAB_REPO: ${{ secrets.GITLAB_REPO }}
        run: |
          git config user.name "${{ steps.author.outputs.name }}"
          git config user.email "${{ steps.author.outputs.email }}"
          git remote add gitlab https://oauth2:${GITLAB_TOKEN}@gitlab.com/${GITLAB_USERNAME}/${GITLAB_REPO}.git
          
      - name: Sync with GitLab
        if: env.skip == 'false'  # Only run this step if not a sync commit
        run: |
          # Fetch from GitLab
          git fetch gitlab main
          
          # Create a temporary branch from GitLab's version
          git checkout -b temp_branch gitlab/main
          
          # Try to merge GitHub changes, preferring GitLab's version
          git merge -X theirs --no-edit origin/main || {
            # If merge fails, keep GitLab's version
            git merge --abort
            git reset --hard gitlab/main
          }
          
          # Push the result back to GitLab (no force needed since we're based on GitLab's version)
          git push gitlab HEAD:main
          
          # Check if the 'community' tag exists
          echo "Checking for existing tag 'community'..."
          if git ls-remote --tags gitlab | grep -q "refs/tags/community"; then
            echo "Tag 'community' already exists. Skipping tag creation."
          else
            echo "Creating new tag 'community'."
            git tag -a "community" -m "Community contribution"
            git push gitlab "community"
          fi

