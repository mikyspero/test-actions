stages:
  - sync

sync_to_github:
  stage: sync
  only:
    - main
  script:
    - echo "Checking commit message for sync flag..."
    - if echo "$CI_COMMIT_MESSAGE" | grep -q "\[sync\]"; then
        echo "This is a synchronization commit. Skipping further actions.";
        exit 0;
      else
        echo "This is a normal commit. Proceeding with sync.";
      fi

    # Step 1: Configure Git with the current user's username and email
    - git config --global user.name "$GITLAB_USER_LOGIN"  # Use the current GitLab user's username
    - git config --global user.email "$GITLAB_USER_EMAIL"  # Use the current GitLab user's email
    # Step 2: Add GitHub as a remote
    - git remote add github https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/$GITHUB_USERNAME/$GITHUB_REPO.git
    - git fetch github main  # Fetch the latest from GitHub's main branch
    # Step 3: Merge changes from GitLab's main branch with GitHub's main branch
    - git checkout -b main origin/main  # Checkout the main branch from GitLab
    - git fetch github main               # Fetch the latest from GitHub's main branch
    - |
      git merge -X theirs github/main || {
        # If a merge conflict occurs, prefer GitLab's version
        git merge --abort
        git reset --hard origin/main
      }
      
    # Step 5: Create a sync commit if this is a normal commit
    - echo "Creating sync commit with message 'Sync from GitLab [sync]'"
    - git commit --allow-empty -m "Sync from GitLab [sync]"

        # Step 4: Push the merged changes back to GitHub
    - git push github main 

    # Step 5: Check if the "core" tag exists in GitHub
    - echo "Checking for existing tag 'core'..."
    - |
      if git ls-remote --tags github | grep -q "refs/tags/core"; then
        echo "Tag 'core' already exists. Skipping tag creation.";
      else
        echo "Creating new tag 'core'."
        git tag -f -a "core" -m "Core team contribution"
        git push --force github "core"
      fi
